"""
Part 2: System Identification from Plant Data

This script uses the data generated by `plant_simulation.py` to identify
a simplified control model for the canal system. Specifically, it fits the
sensor data (water level) to a First-Order Plus Time-Delay (FOPTD) model
based on the actuator data (gate opening).

The identified parameters (gain, time constant, delay) can then be used
for designing a controller (e.g., a PID controller).
"""

import pandas as pd
import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

def foptd_model(t, Kp, T, tau):
    """
    Defines a First-Order Plus Time-Delay (FOPTD) model.
    y(t) = 0 for t < tau
    y(t) = Kp * (1 - exp(-(t - tau) / T)) for t >= tau

    Args:
        t (np.ndarray): Time vector, starting from the step input.
        Kp (float): The process gain.
        T (float): The process time constant.
        tau (float): The process time delay.

    Returns:
        np.ndarray: The model's response.
    """
    response = np.zeros_like(t, dtype=float)
    # Ensure T is positive to avoid math errors
    T = max(T, 1e-9)

    mask = t >= tau
    response[mask] = Kp * (1 - np.exp(-(t[mask] - tau) / T))
    return response

def identify_model_parameters():
    """
    Loads plant data and performs system identification.
    """
    print("--- Starting System Identification ---")

    # --- 1. Load Data ---
    try:
        data = pd.read_csv("plant_data.csv")
    except FileNotFoundError:
        print("Error: `plant_data.csv` not found.")
        print("Please run `plant_simulation.py` first to generate the data.")
        return

    print("Successfully loaded `plant_data.csv`.")

    # --- 2. Process Data to Find Step Response ---
    gate_openings = data['gate_opening']
    diffs = gate_openings.diff()
    step_indices = diffs[diffs != 0].dropna().index

    if len(step_indices) == 0:
        print("Error: No step input found in the data.")
        return

    step_index = step_indices[0]
    step_time = data['timestamp'][step_index]

    u_initial = data['gate_opening'][step_index - 1]
    u_final = data['gate_opening'][step_index]
    delta_u = u_final - u_initial

    y_data = data['upstream_water_level']
    y_initial = y_data[step_index - 1]

    # The actual response is the deviation from the initial state
    y_response = y_data[step_index:] - y_initial
    t_response = data['timestamp'][step_index:] - step_time

    print(f"Step input of {delta_u:.2f} detected at t={step_time}s.")

    # --- 3. Perform Curve Fitting ---
    # The model gain Kp is for a unit step. We scale the response by delta_u
    # to normalize it, so the fitted Kp is the true process gain.
    y_normalized = y_response / delta_u

    # Provide initial guesses for the parameters [Kp, T, tau]
    # Kp: guess from the final value of the normalized response
    Kp_guess = y_normalized.iloc[-1]
    # T: guess as roughly 1/3 of the response time
    T_guess = (t_response.iloc[-1] - t_response.iloc[0]) / 3
    # tau: guess as a small initial delay
    tau_guess = 5.0
    initial_guesses = [Kp_guess, T_guess, tau_guess]

    print(f"Initial guesses: Kp={Kp_guess:.2f}, T={T_guess:.2f}, tau={tau_guess:.2f}")

    try:
        params, covariance = curve_fit(
            f=foptd_model,
            xdata=t_response.to_numpy(),
            ydata=y_normalized.to_numpy(),
            p0=initial_guesses,
            bounds=([-np.inf, 0, 0], [np.inf, np.inf, np.inf]) # Constrain T and tau to be non-negative
        )
    except Exception as e:
        print(f"Error during curve fitting: {e}")
        return

    Kp_fit, T_fit, tau_fit = params

    print("\n--- System Identification Results ---")
    print(f"Identified Process Gain (Kp): {Kp_fit:.4f} m / unit of gate opening")
    print(f"Identified Time Constant (T): {T_fit:.4f} s")
    print(f"Identified Time Delay (tau): {tau_fit:.4f} s")

    # --- 4. Visualize Results ---
    # Generate the model response with the fitted parameters, scaled back by delta_u
    y_fitted_normalized = foptd_model(t_response, Kp_fit, T_fit, tau_fit)
    y_fitted = y_fitted_normalized * delta_u + y_initial

    plt.figure(figsize=(12, 8))

    plt.plot(data['timestamp'], data['upstream_water_level'], 'b-', label='Actual Upstream Water Level (Plant Data)')
    plt.plot(t_response + step_time, y_fitted, 'r--', linewidth=2, label=f'Fitted FOPTD Model (Kp={Kp_fit:.2f}, T={T_fit:.2f}, Ï„={tau_fit:.2f})')

    plt.axvline(x=step_time, color='grey', linestyle=':', label=f'Step Input at t={step_time}s')
    plt.title('System Identification: Plant Data vs. Fitted FOPTD Model')
    plt.xlabel('Time (s)')
    plt.ylabel('Upstream Water Level (m)')
    plt.legend()
    plt.grid(True)

    output_filename = "identification_results.png"
    plt.savefig(output_filename)
    print(f"\n--- Results plot saved to {output_filename} ---")


if __name__ == "__main__":
    identify_model_parameters()
